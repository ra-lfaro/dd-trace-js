'use strict'

const { getFirstNonDDPathAndLine } = require('../path-line')
const { createVulnerability, addVulnerability } = require('../vulnerability-reporter')
const overheadController = require('../overhead-controller')
const { SinkIastPlugin } = require('../iast-plugin')

class Analyzer extends SinkIastPlugin {
  constructor (type) {
    super()
    this._type = type
  }

  _isVulnerable (value, context) {
    return false
  }

  _report (value, context) {
    const evidence = this._getEvidence(value, context)
    const location = this._getLocation()
    const spanId = context && context.rootSpan && context.rootSpan.context().toSpanId()
    const vulnerability = createVulnerability(this._type, evidence, spanId, location)
    addVulnerability(context, vulnerability)
  }

  _reportIfVulnerable (value, context) {
    if (this._isVulnerable(value, context) && this._checkOCE(context)) {
      this._report(value, context)
      return true
    }
    return false
  }

  _getEvidence (value) {
    return { value }
  }

  _getLocation () {
    return getFirstNonDDPathAndLine()
  }

  _invalidContext (iastPluginContext) {
    return !iastPluginContext || (iastPluginContext.store && !iastPluginContext.iastContext)
  }

  analyze (value, iastPluginContext) {
    if (this._invalidContext(iastPluginContext)) return

    this._reportIfVulnerable(value, iastPluginContext.iastContext)
  }

  analyzeAll (iastPluginContext, ...values) {
    if (this._invalidContext(iastPluginContext)) return

    const iastContext = iastPluginContext.iastContext
    for (let i = 0; i < values.length; i++) {
      const value = values[i]
      if (this._isVulnerable(value, iastContext)) {
        if (this._checkOCE(iastContext)) {
          this._report(value, iastContext)
        }
        break
      }
    }
  }

  _checkOCE (context) {
    return overheadController.hasQuota(overheadController.OPERATIONS.REPORT_VULNERABILITY, context)
  }

  addSub (iastSub, handler) {
    super.addSub({ tag: this._type, ...iastSub }, handler)
  }
}

module.exports = Analyzer
